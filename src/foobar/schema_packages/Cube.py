from typing import TYPE_CHECKING

import numpy as np
import pandas as pd
from nomad.datamodel.data import (ArchiveSection, EntryData, Process, Quantity,
                                  Section, SubSection)
from nomad.units import ureg

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import EntryArchive
    from structlog.stdlib import BoundLogger


class Row:
    m_def = Section(
        a_eln={
            "properties": {
                "order": [
                    "time",
                    "H_ex",
                    "M",
                ]
            }
        },)

    M = Quantity(
        type=np.float64,
        description='Magnetisation',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `TemperatureRamp` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Sintering(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    steps = SubSection(
        section_def=Row,
        repeats=True,
    )
    data_file = Quantity(
        type=str,
        description='The recipe file for the sintering process.',
        a_eln={
            "component": "FileEditQuantity",
        },
    )

    def normalize(self, archive, logger: BoundLogger) -> None:
        '''
        The normalizer for the `Sintering` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super(Sintering, self).normalize(archive, logger)
        if self.data_file:
          with archive.m_context.raw_file(self.data_file) as file:
            df = pd.read_csv(file)
            df = pd.read_csv(file, sep='\t', header=0, names=['time', 'H_ex', 'M'])
          steps = []
          for i, row in df.iterrows():
            step = Row()
            step.time = row['time']
            step.H_ex = row['H_ex']
            step.M = row['M']
            # step.duration = ureg.Quantity(float(row['duration [min]']), 'min')
            # step.initial_temperature = ureg.Quantity(row['initial temperature [C]'], 'celsius')
            # step.final_temperature = ureg.Quantity(row['final temperature [C]'], 'celsius')
            steps.append(step)
        self.steps = steps
